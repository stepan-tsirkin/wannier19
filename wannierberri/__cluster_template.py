slurm_text = """#!/bin/bash

# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS A TEMPLATE AND IT SHOULD NOT BE DEPLOYED TO PRODUCTION!

#SBATCH --partition={{PARTITION_NAME}}
#SBATCH --job-name={{JOB_NAME}}
#SBATCH --output={{JOB_NAME}}.log
{{GIVEN_NODE}}

### This script works for any number of nodes, Ray will find and manage all resources
#SBATCH --nodes={{NUM_NODES}}
#SBATCH --exclusive

### Give all resources to a single Ray task, ray can manage the resources internally
#SBATCH --ntasks-per-node=1
{{NUM_GPUS_PER_NODE}}

# Load modules or your own conda environment here
# module load pytorch/v1.4.0-gpu
# conda activate {{CONDA_ENV}}
{{LOAD_ENV}}

################# DON NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING ###############
# This script is a modification to the implementation suggest by gregSchwartz18 here:
# https://github.com/ray-project/ray/issues/826#issuecomment-522116599
redis_password=$(uuidgen)
export redis_password

nodes=$(scontrol show hostnames $SLURM_JOB_NODELIST) # Getting the node names
nodes_array=($nodes)

node_1=${nodes_array[0]}
ip=$(srun --nodes=1 --ntasks=1 -w $node_1 hostname --ip-address) # making redis-address

if [[ $ip == *" "* ]]; then
  IFS=' ' read -ra ADDR <<<"$ip"
  if [[ ${#ADDR[0]} > 16 ]]; then
    ip=${ADDR[1]}
  else
    ip=${ADDR[0]}
  fi
  echo "We detect space in ip! You are using IPV6 address. We split the IPV4 address as $ip"
fi

port=6379
ip_head=$ip:$port
export ip_head
echo "IP Head: $ip_head"

echo "STARTING HEAD at $node_1"
# srun --nodes=1 --ntasks=1 -w $node_1 start-head.sh $ip $redis_password &
srun --nodes=1 --ntasks=1 -w $node_1 \
  ray start --head --node-ip-address=$ip --port=6379 --redis-password=$redis_password --block {{SPILLING}}&
sleep {{SLEEP_HEAD}}

worker_num=$(($SLURM_JOB_NUM_NODES - 1)) #number of nodes other than the head node
for ((i = 1; i <= $worker_num; i++)); do
  node_i=${nodes_array[$i]}
  echo "STARTING WORKER $i at $node_i"
  srun --nodes=1 --ntasks=1 -w $node_i ray start --address $ip_head --redis-password=$redis_password --block &
  sleep {{SLEEP_WORKER}}
done

##############################################################################################

#### call your code below
{{COMMAND_PLACEHOLDER}} {{COMMAND_SUFFIX}}
"""


pbs_torque_text = """#!/bin/bash

# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS A TEMPLATE AND IT SHOULD NOT BE DEPLOYED TO PRODUCTION!

#PBS -N {{JOB_NAME}}
#PBS -q {{PARTITION_NAME}}
#PBS -l nodes={{NUM_NODES}}:ppn=2{{NUM_GPUS_PER_NODE}}
#PBS -l walltime=00:10:00
#PBS -o {{JOB_NAME}}.log
#PBS -e {{JOB_NAME}}.err
export OMP_NUM_THREADS=1
cd $PBS_O_WORKDIR

# Load modules or your own conda environment here
{{LOAD_ENV}}

################# DON NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING ###############

# This script is taken and modified from https://github.com/ray-project/ray/issues/10466#issuecomment-737476909

jobnodes=`uniq -c $PBS_NODEFILE | awk -F. '{print $1 }' | awk '{print $2}' | paste -s -d " "`

redis_password=$(uuidgen)
export redis_password

thishost=`uname -n | awk -F. '{print $1.}'`
ip=`hostname -i`
port=6379
ip_head="$ip:$port"
export ip_head
echo "IP Head: $ip_head"

echo "Allocate Nodes = <$jobnodes>"

echo "set up ray cluster..."
for node in `echo $jobnodes`; do
    if [[ $node == "$thishost" ]]; then
        echo "STARTING HEAD at $node"
        ray start --head --node-ip-address=$ip --port=$port --redis-password=$redis_password --block {{SPILLING}}&
        sleep {{SLEEP_HEAD}}
    else
        echo "STARTING WORKER at $node"
        ssh $node ray start --address=$ip_head --redis-password=$redis_password
        sleep {{SLEEP_WORKER}}
    fi
done

##############################################################################################

#### call your code below
{{COMMAND_PLACEHOLDER}} {{COMMAND_SUFFIX}}
"""